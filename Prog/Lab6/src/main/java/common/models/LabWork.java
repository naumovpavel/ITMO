package common.models;

import common.utils.validators.AutoGenerated;
import common.utils.validators.GraterThan;
import common.utils.validators.NotNull;
import common.utils.validators.StringNotNone;

import java.io.Serializable;
import java.util.Date;
import java.util.HashMap;
import java.util.function.Supplier;

/**
 * LabWork model
 */
public class LabWork extends Model implements Comparable<LabWork>, Serializable {
    @NotNull
    @GraterThan
    @AutoGenerated
    private Long id; //Поле не может быть null, Значение поля должно быть больше 0, Значение этого поля должно быть уникальным, Значение этого поля должно генерироваться автоматически
    @NotNull
    @StringNotNone
    private String name; //Поле не может быть null, Строка не может быть пустой
    @NotNull
    private Coordinates coordinates; //Поле не может быть null
    @NotNull
    @AutoGenerated
    private java.util.Date creationDate; //Поле не может быть null, Значение этого поля должно генерироваться автоматически
    @GraterThan
    private Long minimalPoint; //Поле может быть null, Значение поля должно быть больше 0
    private Integer tunedInWorks;
    @NotNull
    private Difficulty difficulty; //Поле может быть null
    @NotNull
    private Person author; //Поле не может быть null



    @Override
    public void init(HashMap<String, Object> values) {
        if(values.containsKey("id")) {
            this.id = (Long) values.get("id");
            maxId = Long.max(id + 1 , maxId);
        } else {
            this.id = maxId++;
        }
        if(values.containsKey("creationDate")) {
            this.creationDate = (Date) values.get("creationDate");
        } else {
            this.creationDate = new Date();
        }
        this.name = (String) values.get("name");
        this.coordinates = (Coordinates) values.get("coordinates");
        this.difficulty = (Difficulty) values.get("difficulty");
        this.author = (Person) values.get("author");
        this.minimalPoint = (Long) values.get("minimalPoint");
        this.tunedInWorks = (Integer) values.get("tunedInWorks");
    }

    @Override
    public void autoGen() {
        this.id = maxId++;
        this.creationDate = new Date();
    }

    /**
     * Returns author
     * @return author
     */
    public Person getAuthor() {
        return author;
    }

    public Long getId() {
        return id;
    }

    /**
     * Returns name
     * @return name
     */
    public String getName() {
        return name;
    }

    /**
     * Returns tuned in works
     * @return tuned in works
     */
    public Integer getTunedInWorks() {
        return tunedInWorks;
    }

    @Override
    public HashMap<String, Object> getValues() {
        HashMap<String, Object> values = new HashMap<>();
        values.put("name", name);
        values.put("id", id);
        values.put("creationDate", creationDate);
        values.put("coordinates", coordinates);
        values.put("difficulty", difficulty);
        values.put("author", author);
        values.put("minimalPoint", minimalPoint);
        values.put("tunedInWorks", tunedInWorks);
        return values;
    }
    @Override
    public Supplier<? extends Model> getConstructorReference() {
        return LabWork::new;
    }

    @Override
    public String toString() {
        return "{\n" +
                "id : " + id +
                ",\nname : " + name +
                ",\ncoordinates : " + coordinates +
                ",\ncreationDate : " + creationDate +
                ",\nminimalPoint : " + minimalPoint +
                ",\ntunedInWorks : " + tunedInWorks +
                ",\ndifficulty : " + difficulty +
                ",\nauthor : " + author +
                "\n}\n";
    }

    @Override
    public int compareTo(LabWork o) {
        return o.getName().compareTo(name);
    }
}