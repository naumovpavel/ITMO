package common.models;

import common.utils.validators.*;

import java.io.Serializable;
import java.util.HashMap;
import java.util.function.Supplier;

public class User extends Model implements Serializable {
    @AutoGenerated
    private int id;
    @StringNotNone
    private String name;
    @IgnoreInput
    private String salt;
    @IgnoreInput
    private byte[] passwordHash;
    @StringNotNone
    private String password;

    @Override
    public Supplier<? extends Model> getConstructorReference() {
        return User::new;
    }

    @Override
    public void init(HashMap<String, Object> values) {
        name = (String) values.get("name");
        password = (String) values.get("password");
        if(values.containsKey("salt")) {
            salt = (String) values.get("salt");
        }
        if(values.containsKey("passwordHash")) {
            passwordHash = (byte[]) values.get("passwordHash");
        }
        if(values.containsKey("id")) {
            id = (int) values.get("id");
        }
    }

    @Override
    public HashMap<String, Object> getValues() {
        HashMap<String, Object> values = new HashMap<>();
        values.put("name", name);
        values.put("id", id);
        values.put("password", password);
        values.put("salt", salt);
        values.put("passwordHash", passwordHash);
        return values;
    }

    public void setId(int id) {
        this.id = id;
    }

    @Override
    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public String getPassword() {
        return password;
    }

    @Override
    public String toString() {
        return "User {\n" +
                "id : " + id +
                ",\n name : '" + name + '\'' +
                ",\n salt : '" + salt + '\'' +
                ",\n passwordHash : '" + passwordHash + '\'' +
                ",\n password : '" + password + '\'' +
                "\n}";
    }
}
