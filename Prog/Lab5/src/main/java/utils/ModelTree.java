package utils;

import utils.validators.*;
import models.Model;

import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.util.*;
import java.util.function.Supplier;

import static java.util.Arrays.sort;

public class ModelTree {
    private String name;
    private boolean mayNull = true;
    private boolean autoGenerated = false;
    private Class<?> type;
    public Supplier<? extends Model> constructor;
    private boolean primitive;
    private ArrayList<ModelTree> fields = new ArrayList<>();
    private boolean isEnum = false;
    private HashMap<String, ArrayList<Validatable>> validatators = new HashMap<>();
    private HashMap<String, Enum<?>> enumConstant;

    public <T> ModelTree(String name, Class<T> type) {
        this.name = name;
        this.type = type;
        this.primitive = Converter.checkForPrimitive(type);
        if(type.isEnum()) {
            isEnum = true;
            //field.enumConstant = new ArrayList<>(Arrays.asList(field.type.getEnumConstants()));
            enumConstant = new HashMap<>();
            for(T x : type.getEnumConstants()) {
                enumConstant.put(x.toString(), (Enum<?>) x);
            }
        }
        if(!this.primitive) {
            try {
                Model obj = (Model) type.getConstructor().newInstance();
                this.constructor = obj.getConstructorReference();
                for(Field field : type.getDeclaredFields()) {
                    if(field.getName().equals("constraint")) {
                        continue;
                    }

                    Annotation[] annotations = field.getAnnotations();
                    validatators.put(field.getName(), new ArrayList<>());
                    boolean autoGenerated = false;
                    boolean mayNull = true;

                    for(Annotation annotation : annotations) {
                        if(annotation instanceof AutoGenerated) {
                            autoGenerated = true;
                        }
                        if(annotation instanceof NotNull) {
                            mayNull = false;
                        }
                        ValidatableAnnotation validatableAnnotation = annotation.annotationType().getAnnotation(ValidatableAnnotation.class);
                        if(validatableAnnotation != null) {
                            Validatable validatable = validatableAnnotation.validator().getConstructor().newInstance();
                            if(annotation instanceof GraterThan) {
                                validatable = ((ValidatableWithArg)validatable).getInstanc(((GraterThan)annotation).value());
                            } else if(annotation instanceof LessThan) {
                                validatable = ((ValidatableWithArg)validatable).getInstanc(((LessThan)annotation).value());
                            } else {
                                validatable = validatable.getInstanc();
                            }
                            validatators.get(field.getName()).add(validatable);

                        }
                    }

                    this.fields.add(new ModelTree(field.getName(), field.getType()));
                    this.fields.get(this.fields.size() - 1).autoGenerated = autoGenerated;
                    this.fields.get(this.fields.size() - 1).mayNull = mayNull;
                }
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }
        fields.sort(Comparator.comparing((x) -> x.name));
    }

    public <T> ModelTree(Class<T> type) {
        this(type.getName(), type);
    }

    public String getName() {
        return name;
    }

    public boolean isMayNull() {
        return mayNull;
    }

    public boolean isAutoGenerated() {
        return autoGenerated;
    }

    public Class<?> getType() {
        return type;
    }

    public Supplier<? extends Model> getConstructor() {
        return constructor;
    }

    public boolean isPrimitive() {
        return primitive;
    }

    public ArrayList<ModelTree> getFields() {
        return fields;
    }

    public boolean isEnum() {
        return isEnum;
    }

    public HashMap<String, ArrayList<Validatable>> getValidatators() {
        return validatators;
    }

    public HashMap<String, Enum<?>> getEnumConstant() {
        return enumConstant;
    }

    public static void print(ModelTree tree, String tab) {
        System.out.println(tab + tree.name + " " + tree.mayNull);
        if(!tree.primitive) {
            for(ModelTree x : tree.fields) {
                ModelTree.print(x, tab + "  ");
            }
        }
    }
}
