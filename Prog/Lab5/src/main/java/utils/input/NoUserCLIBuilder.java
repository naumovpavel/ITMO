package utils.input;

import models.Model;
import utils.Converter;
import utils.ModelTree;
import utils.validators.Validator;

import java.util.HashMap;
import java.util.Objects;

/**
 * Class that can build model objects from script file
 */
public class NoUserCLIBuilder implements Builder {
    private final BufferedReader reader;

    public NoUserCLIBuilder(BufferedReader reader) {
        this.reader = reader;
    }

    /**
     * Build fully initialized and validated model object from file and sets id from script file
     * @param tree ModelTree
     * @param id id
     * @return object of Model
     * @param <T> Model type
     */
    @SuppressWarnings("unchecked")
    public <T extends Model> T build(ModelTree tree, Long id) {
        T obj = (T) tree.constructor.get();
        HashMap<String, Object> values = new HashMap<>();

        if(id > -1L) {
            values.put("id", id);
        }

        for(ModelTree field : tree.getFields()) {
            boolean skip = false;
            if(field.isAutoGenerated()) {
                continue;
            }

            if(field.isMayNull()) {
                String answer = reader.nextLine();
                if(!Objects.equals(answer, "N") && !Objects.equals(answer, "Y")) {
                    System.out.print(answer);
                    throw new IllegalArgumentException("Я вас не понимать. Значение должно быть Y/N");
                } else {
                    if(answer.equals("Y")) {
                        skip = true;
                    }
                }
            }

            if(skip) {
                values.put(field.getName(), Converter.convert(field.getType(), null));
                continue;
            }

            if(!field.isPrimitive()) {
                values.put(field.getName(), build(field));
                continue;
            }

            String value = reader.nextLine();

            if(field.isEnum()) {
                if(field.getEnumConstants().containsKey(value)) {
                    values.put(field.getName(), field.getEnumConstants().get(value));
                } else {
                    throw new IllegalArgumentException("Вы ввели не существующую константу " + value);
                }
            } else {
                try {
                    values.put(field.getName(), Converter.convert(field.getType(), value));
                    if (tree.getValidators().containsKey(field.getName())) {
                        Validator.validate(values.get(field.getName()), tree.getValidators().get(field.getName()));
                    }
                } catch (IllegalArgumentException e) {
                    throw new IllegalArgumentException("Вы ввели недопустимое значение! " + e.getMessage());
                }
            }
        }
        obj.init(values);
        return (T) obj;
    }

    /**
     * Build full initialized and validated model object from script file
     * @param tree ModelTree
     * @return object of Model
     * @param <T> Model type
     */
    public <T extends Model> T build(ModelTree tree) {
        return build(tree, -1L);
    }
}
