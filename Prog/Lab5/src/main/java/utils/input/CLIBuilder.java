package utils.input;

import utils.Converter;
import utils.ModelTree;
import utils.validators.Validator;
import models.Model;

import java.util.HashMap;
import java.util.Objects;
import java.util.Scanner;

/**
 * Class that can build model objects using Cli
 */
public class CLIBuilder implements Builder {
    private final Scanner scanner;

    /**
     * Default constructor
     */
    public CLIBuilder() {
        this.scanner = new Scanner(System.in);
    }

    /**
     * Build full initialized and validated model object using Cli and sets id
     * @param tree ModelTree
     * @param id id
     * @return object of Model
     * @param <T> Model type
     */
    @SuppressWarnings("unchecked")
    public <T extends Model> T build(ModelTree tree, Long id) {
        T obj = (T) tree.constructor.get();
        HashMap<String, Object> values = new HashMap<>();

        if(id > -1L) {
            values.put("id", id);
        }

        for(ModelTree field : tree.getFields()) {
            boolean skip = false;
            if(field.isAutoGenerated()) {
                continue;
            }

            if(field.isMayNull()) {
                while (true) {
                    System.out.println("Поле " + field.getName() + " не обязательное, пропустить?(Y/N)");
                    String answer = scanner.nextLine();
                    if(!Objects.equals(answer, "N") && !Objects.equals(answer, "Y")) {
                        System.out.println("Я вас не понимать");
                    } else {
                        if(answer.equals("Y")) {
                            skip = true;
                        }
                        break;
                    }
                }
            }

            if(skip) {
                values.put(field.getName(), Converter.convert(field.getType(), null));
                continue;
            }

            if(!field.isPrimitive()) {
                System.out.println("Введите " + field.getName());
                values.put(field.getName(), build(field));
                continue;
            }

            if (field.isEnum()) {
                System.out.println("Доступные варианты констант для " + field.getName());
                for(Object x : field.getEnumConstants().values()) {
                    System.out.println(x);
                }
            }

            while (true) {
                System.out.println("Введите " + field.getName());
                String value = scanner.nextLine();

                if(field.isEnum()) {
                    if(field.getEnumConstants().containsKey(value)) {
                        values.put(field.getName(), field.getEnumConstants().get(value));
                        break;
                    } else {
                        System.out.println("Вы ввели не существующюю константу. Повторите ввод");
                    }
                } else {
                    try {
                        values.put(field.getName(), Converter.convert(field.getType(), value));
                        if (tree.getValidators().containsKey(field.getName())) {
                            Validator.validate(values.get(field.getName()), tree.getValidators().get(field.getName()));
                        }
                        break;
                    } catch (IllegalArgumentException e) {
                        System.out.println("Вы ввели недопустимое значение! " + e.getMessage() + ". Повторите ввод");
                    }
                }
            }
        }
        obj.init(values);
        return (T) obj;
    }

    /**
     * Build full initialized and validated model object using Cli
     * @param tree ModelTree
     * @return object of Model
     * @param <T> Model type
     */
    public <T extends Model> T build(ModelTree tree) {
        return build(tree, -1L);
    }
}
