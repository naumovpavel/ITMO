import javax.xml.transform.stream.StreamSource
import javax.xml.validation.SchemaFactory
import java.security.MessageDigest;

plugins {
    id 'java'
    id 'war'
}

group = 'com.wift.lab3'


repositories {
    mavenCentral()
}

dependencies {
    compileOnly('jakarta.enterprise:jakarta.enterprise.cdi-api:4.0.1')
    compileOnly('jakarta.validation:jakarta.validation-api:3.0.2')
    implementation group: 'jakarta.faces', name: 'jakarta.faces-api', version: '4.0.1'
    compileOnly('jakarta.servlet:jakarta.servlet-api:6.0.0')
    implementation group: 'jakarta.persistence', name: 'jakarta.persistence-api', version: '3.1.0'
    compileOnly('jakarta.platform:jakarta.jakartaee-web-api:9.0.0')
    implementation('org.primefaces:primefaces:13.0.0:jakarta')
    compileOnly('jakarta.ws.rs:jakarta.ws.rs-api:3.1.0')
    implementation group: 'jakarta.annotation', name: 'jakarta.annotation-api', version: '2.1.1'
    implementation group: 'jakarta.xml.bind', name: 'jakarta.xml.bind-api', version: '4.0.0'
    implementation 'org.postgresql:postgresql:42.2.27'
    compileOnly('org.projectlombok:lombok:1.18.26')
    annotationProcessor('org.projectlombok:lombok:1.18.26')
    testCompileOnly('org.projectlombok:lombok:1.18.26')
    testAnnotationProcessor('org.projectlombok:lombok:1.18.26')
    implementation 'org.postgresql:postgresql:42.2.27'
    compileOnly('jakarta.ejb:jakarta.ejb-api:4.0.1') //

    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
    testImplementation 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.10.2'
    testImplementation 'org.junit.platform:junit-platform-console-standalone:1.10.2'
}

task compile {
    dependsOn classes
}

task history {
    doLast {
        def success = false
        def diffResult = ""
        def outputStream
        def count = 0
        def prevCommit = 'HEAD'
        def diffFile = file("$buildDir/diff.txt")

        while (!success) {
            try {
                exec {
                    commandLine 'gradlew', 'compile'
                }
                success = true
            } catch (Exception e) {
                println "Compile error: ${e.message}"
                success = false
            }
            if(success) {
                if(count == 0) {
                    break
                }
                println "Project compiled successfully, diff in ${diffFile}"
                successfullyLoaded = true
                def outputFile = new File("diff.txt")
                outputFile.write(diffResult)
                break
            }

            println "Failed to compile project, checkout to prev commit"
            if(count > 0) {
                prevCommit += '^'
            }

            outputStream = new ByteArrayOutputStream()
            exec {
                commandLine 'git', 'diff', prevCommit,  '.'
                standardOutput = outputStream
            }
            diffResult = outputStream.toString()
            count++
            exec {
                commandLine 'git', 'checkout', prevCommit
                ignoreExitValue true
            }
        }
    }
}

tasks.register('javadoc_task', Javadoc) {
    dependsOn classes

    source = sourceSets.main.allJava
    destinationDir = file("$buildDir/docs/javadoc")
    classpath = sourceSets.main.compileClasspath

    options {
        encoding = 'UTF-8'
        charSet = 'UTF-8'
        links("https://docs.oracle.com/en/java/javase/17/docs/api/")
        addStringOption('Xdoclint:none', '-quiet')
    }
}

tasks.register('md5sha1') {
    dependsOn 'jar'
    doLast {
        def jarFile = file("build/libs/${project.name}.jar")
        if (!jarFile.exists()) {
            throw new FileNotFoundException("JAR file not found: ${jarFile.absolutePath}")
        }

        def md5 = MessageDigest.getInstance("MD5")
        def sha1 = MessageDigest.getInstance("SHA-1")

        jarFile.withInputStream { input ->
            byte[] buffer = new byte[8192]
            int bytesRead
            while ((bytesRead = input.read(buffer)) != -1) {
                md5.update(buffer, 0, bytesRead)
                sha1.update(buffer, 0, bytesRead)
            }
        }

        def md5Hex = md5.digest().encodeHex().toString()
        def sha1Hex = sha1.digest().encodeHex().toString()

        def manifestFile = file("src/main/resources/META-INF/MANIFEST.MF")
        manifestFile.parentFile.mkdirs()
        manifestFile.withWriterAppend { writer ->
            writer.println("MD5-Digest: ${md5Hex}")
            writer.println("SHA1-Digest: ${sha1Hex}")
        }
    }
}

tasks.named('jar', Jar) {
    from("${buildDir}/javadoc") {
        into 'javadoc'
    }
}

tasks.register('doc') {
    dependsOn 'javadoc_task', 'md5sha1'
}

tasks.register('doc_task') {
    doLast {
        def manifestContent = new StringBuilder()
        fileTree(dir: '${projectDir}/src/main/java').visit { FileVisitDetails details ->
            if (!details.directory) {
                def md5 = MessageDigest.getInstance('MD5')
                def sha1 = MessageDigest.getInstance('SHA-1')
                details.file.withInputStream { is ->
                    byte[] buffer = new byte[1024]
                    int read = 0
                    while ((read = is.read(buffer)) != -1) {
                        md5.update(buffer, 0, read)
                        sha1.update(buffer, 0, read)
                    }
                }
                manifestContent.append(details.relativePath)
                        .append(' MD5: ')
                        .append(md5.digest().collect { String.format('%02x', it) }.join())
                        .append(' SHA-1: ')
                        .append(sha1.digest().collect { String.format('%02x', it) }.join())
                        .append('\n')
            }
        }
        file('src/main/resources/META-INF/MANIFEST.MF').text = manifestContent.toString()

        def javadocDir = file("${buildDir}/docs/javadoc")
        javadocDir.mkdirs()
        exec {
            commandLine 'javadoc', '-d', javadocDir, '-sourcepath', '${projectDir}/src/main/java', '-subpackages', '.'
        }
    }
}

//task playMusic {
//    dependsOn build
//    exec {
//        commandLine 'play', 'ALBLAK.mp3'
//    }
//}

task native2ascii {
    ant.native2ascii(src: project.file(file('src/main/webapp/resources/native')),
            dest: project.file(file('src/main/webapp/resources/ascii/')))
}


tasks.register('env', Exec) {
    dependsOn build
    copy {
        into("/Users/wiftwift/wildfly/wildfly-32.0.1.Final/standalone/deployments")
        from("${buildDir}/libs/lab3.war")
    }
    environment 'JAVA_OPTS', '-Xms256m -Xmx1024m'
    commandLine '/Users/wiftwift/wildfly/wildfly-32.0.1.Final/bin/standalone.sh'
}

tasks.register('report') {
    copy {
        from("${buildDir}/test-results/testOPI/*.xml")
        into("${projectDir}/report/")
    }
    exec {
        commandLine 'git', 'add', '.'
    }
    exec {
        commandLine 'git', 'commit', '-m', 'Add test reports'
    }
}

test {
    useJUnitPlatform()
}