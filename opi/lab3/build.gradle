import javax.xml.transform.stream.StreamSource
import javax.xml.validation.SchemaFactory

plugins {
    id 'java'
    id 'war'
}

group = 'com.wift.lab3'


repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'junit:junit:4.11'
    implementation 'javax:javaee-web-api:7.0'
    implementation 'com.sun.faces:jsf-api:2.2.18'
    implementation 'com.sun.faces:jsf-impl:2.2.18'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
    testImplementation 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.10.2'
    testImplementation 'org.junit.platform:junit-platform-console-standalone:1.10.2'
}
//
//tasks.register('history') {
//    group "opi"
//    doLast {
//        def success = false
//        def diffResult = ""
//        def outputStream
//        def count = 0
//        def commit = 'HEAD'
//        def prevCommit = commit + '^'
//        try {
//            exec {
//                workingDir projectDir
//                commandLine 'bash', 'gradlew', 'compileJava'
//            }
//            success = true
//        } catch (Exception e) {
//            println "Compile error: ${e.message}"
//            success = false
//        }
//        println "Compile result: $success"
//        if (!success) {
//            def diffFile = file("$buildDir/diff.txt")
//
//            def successfullyLoaded = false
//
//            while (!successfullyLoaded) {
//                if (count == 0) {
//                    outputStream = new ByteArrayOutputStream()
//                    exec {
//                        commandLine 'git', 'diff'
//                        workingDir projectDir
//                        standardOutput = outputStream
//                    }
//                    diffResult = outputStream.toString()
//                    count = 1
//                    exec {
//                        commandLine 'git', 'reset', '--hard', commit
//                        workingDir projectDir
//                        ignoreExitValue true
//                    }
//                } else {
//                    exec {
//                        commandLine 'git', 'diff', prevCommit, commit
//                        workingDir projectDir
//                        standardOutput = outputStream
//                    }
//                    diffResult = outputStream.toString()
//                    exec {
//                        commandLine 'git', 'reset', '--hard', prevCommit
//                        workingDir projectDir
//                        ignoreExitValue true
//                    }
//
//                }
//
//                try {
//                    exec {
//                        workingDir projectDir
//                        commandLine 'bash', 'gradlew', 'compileJava'
//                    }
//                    success = true
//                } catch (Exception e) {
//                    println "Compile error: ${e.message}"
//                    success = false
//                }
//                if (!success) {
//                    println "Failed to compile project, retrying..."
//                    commit = prevCommit
//                    prevCommit += '^'
//
//
//                } else {
//                    println "Project compiled successfully, diff in ${diffFile}"
//                    successfullyLoaded = true
//                    def outputFile = new File("diff.txt")
//                    outputFile.write(diffResult)
//                }
//
//            }
//
//
//        } else {
//            println "Project compiled successfully, no need to load previous revision"
//        }
//    }
//
//}
//
//def srcDirMain = "${projectDir.path}/src/main"
//def outputArtefactsDir = "${buildDir}/libs"
//def compiledMain = "${buildDir}/classes/java/main"
//def warAssemblingDir = "${buildDir}/war-tmp"
//def mainSourceSet = sourceSets.main
//
//tasks.register('javadoc_task', Javadoc) {
//    dependsOn 'compile'
//
//    source = sourceSets.main.allJava
//    destinationDir = file("$buildDir/docs/javadoc")
//    classpath = sourceSets.main.compileClasspath
//
//    options {
//        encoding = 'UTF-8'
//        charSet = 'UTF-8'
//        links("https://docs.oracle.com/en/java/javase/17/docs/api/")
//        addStringOption('Xdoclint:none', '-quiet')
//    }
//}
//
//tasks.register('md5sha1') {
//    group = 'build'
//    description = 'MD5 и SHA-1 хеш-суммы'
//    dependsOn 'jar'
//    doLast {
//        def jarFile = file("build/libs/${project.name}.jar")
//        if (!jarFile.exists()) {
//            throw new FileNotFoundException("JAR file not found: ${jarFile.absolutePath}")
//        }
//
//        def md5 = MessageDigest.getInstance("MD5")
//        def sha1 = MessageDigest.getInstance("SHA-1")
//
//        jarFile.withInputStream { input ->
//            byte[] buffer = new byte[8192]
//            int bytesRead
//            while ((bytesRead = input.read(buffer)) != -1) {
//                md5.update(buffer, 0, bytesRead)
//                sha1.update(buffer, 0, bytesRead)
//            }
//        }
//
//        def md5Hex = md5.digest().encodeHex().toString()
//        def sha1Hex = sha1.digest().encodeHex().toString()
//
//        def manifestFile = file("src/main/resources/META-INF/MANIFEST.MF")
//        manifestFile.parentFile.mkdirs()
//        manifestFile.withWriterAppend { writer ->
//            writer.println("MD5-Digest: ${md5Hex}")
//            writer.println("SHA1-Digest: ${sha1Hex}")
//        }
//    }
//}
//
//tasks.named('jar', Jar) {
//    dependsOn 'javadoc_task'
//    from("${buildDir}/javadoc") {
//        into 'javadoc'
//    }
//}
//
//tasks.register('doc') {
//    dependsOn 'javadoc_task', 'md5sha1'
//}
//
//task CompileOPI {
//    description = 'Компилирует все файлы проекта.'
//    group = 'OPI'
//    try {
//        exec {
//            workingDir projectDir
//            commandLine 'bash', 'gradlew', 'compileJava'
//        }
//    } catch (Exception ignored) {
//        exec {
//            commandLine 'bash', 'gradlew', 'history'
//        }
//    }
//    doLast {
//        mkdir(warAssemblingDir)
//        copy {
//            into("${warAssemblingDir}/WEB-INF")
//            from("${srcDirMain}/webapp/WEB-INF/faces-config.xml")
//            from("${srcDirMain}/webapp/WEB-INF/web.xml")
//            from("${srcDirMain}/webapp/WEB-INF/beans.xml")
//            from("${compiledMain}") { into("classes") }
//            from(mainSourceSet.runtimeClasspath) { into('lib') include('*.jar') }
//        }
//
//        copy {
//            from("${srcDirMain}/webapp/resources")
//            into("${warAssemblingDir}/resources")
//        }
//        copy {
//            from("${srcDirMain}/webapp/layout")
//            into("${warAssemblingDir}/layout")
//        }
//        copy {
//            into(warAssemblingDir)
//            from("${srcDirMain}/webapp/index.xhtml")
//            from("${srcDirMain}/webapp/main.xhtml")
//        }
//    }
//}
//
//tasks.register('BuildOPI', Exec) {
//    dependsOn CompileOPI
//    mkdir(outputArtefactsDir)
//    commandLine 'jar', '-cf', "${outputArtefactsDir}/${project.name}.war", '-C', warAssemblingDir, '.'
//    doLast {
//        exec {commandLine 'bash', 'gradlew', 'playMusic'}
//    }
//}
//tasks.register("cleanOPI") {
//    description = 'Удаляет все сгенерированные файлы и директории сборки.'
//    delete rootProject.buildDir
//}
//tasks.register("testOPI", Test) {
//    dependsOn build
//    useJUnitPlatform()
//    doLast {
//        exec {commandLine 'bash', 'gradlew', 'report'}
//    }
//}
//
//task playMusic {
//    exec {
//        commandLine 'bash', "myMusic.mp3"
//    }
//}
//task native2ascii {
//    ant.native2ascii(src: project.file(file('src/main/webapp/resources/asciiOld')),
//            dest: project.file(file('src/main/webapp/resources/asciiNew/')))
//}
//
//task validateXml {
//    group = 'OPI'
//    doLast {
//        fileTree('src/main').include('**/*.xml').each { file ->
//            def schemaFactory = SchemaFactory.newInstance("http://www.w3.org/2001/XMLSchema")
//            def schema = schemaFactory.newSchema()
//            def validator = schema.newValidator()
//            try {
//                validator.validate(new StreamSource(file as File))
//            } catch (Exception e) {
//                println "${file} is not valid because ${e.message}"
//            }
//        }
//    }
//}
//
//task report {
//    copy {
//        from("${buildDir}/test-results/testOPI/*.xml")
//        into("${projectDir}/report/")
//    }
//    exec {
//        commandLine 'bash', 'git', 'add', '.'
//    }
//    exec {
//        commandLine 'bash', 'git', 'commit', '-m', 'Add test reports'
//    }
//    exec {
//        commandLine 'bash', 'git', 'push'
//    }
//}
//
//

tasks.register('env', Exec) {
    dependsOn build
    copy {
        into("/Users/wiftwift/wildfly/wildfly-32.0.1.Final/standalone/deployments")
        from("${buildDir}/libs/lab3.war")
    }
//    environment 'JAVA_OPTS', '-Xms256m -Xmx1024m'
    commandLine 'bash', '/Users/wiftwift/wildfly/wildfly-32.0.1.Final/bin/standalone.sh'
}

test {
    useJUnitPlatform()
}